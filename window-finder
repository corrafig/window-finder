#!/usr/bin/env python3
"""
Find rapidly any open window and switch to that. Works also as an application launcher.

Required additional software:
 * dmenu
 * wmctrl
"""

import subprocess
import psutil
import os

from psutil import NoSuchProcess

__author__ = "Tero Mononen"
__email__ = "tero@mononen.eu"


class WindowFinder:
    # Processes that are excluded from the list of open windows
    _ignored_processes = {"xfce4-panel",
                          "xfdesktop"}

    _cmd_dmenu = "dmenu -i -l 20 -m 0"
    _cmd_list_windows = "wmctrl -l -p"
    _cmd_select_window = {"wmctrl -i -r {} -b remove,shaded",
                          "wmctrl -i -a {}"}

    def run(self):
        windows = self.__list_windows()
        dmenu_input = "\n".join(sorted(windows.keys()))
        echo_cmd = 'echo "{}"|'.format(dmenu_input)
        selected = subprocess.getstatusoutput(echo_cmd + self._cmd_dmenu)[1]
        if selected in windows:
            self.__select_window(windows[selected])
        elif len(selected) > 0:
            os.system("which {} && nohup {} &> /dev/null &".format(selected, selected))

    def __list_windows(self):
        windows = {}
        for line in subprocess.getstatusoutput(self._cmd_list_windows)[1].splitlines():
            tokens = line.split()
            window_id = tokens[0]
            workspace = int(tokens[1])
            pid = int(tokens[2])
            window_title = " ".join(tokens[4:])
            if pid < 1:
                continue
            process_name = self.__fetch_process_name(pid)
            if process_name is None:
                continue
            workspace_string = str(workspace) if workspace >= 0 else " "
            menu_item = "{} {}: {}".format(workspace_string, process_name, window_title)
            windows[menu_item] = window_id
        return windows

    def __select_window(self, windowId):
        for command in self._cmd_select_window:
            subprocess.getstatusoutput(command.format(windowId))

    def __fetch_process_name(self, pid):
        try:
            process = psutil.Process(pid)
        except NoSuchProcess:
            return None
        process_name = process.name()
        return process_name if process_name not in self._ignored_processes else None


if __name__ == "__main__":
    y = WindowFinder()
    y.run()

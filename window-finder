#!/usr/bin/env python
"""
Find rapidly any open window and switch to that.

Required additional software:
 * dmenu
 * wmctrl
"""

import commands
import psutil

__author__ = "Tero Mononen"
__email__ = "tero@mononen.eu"


class WindowFinder:
    # Processes that are excluded from the list of open windows
    ignoredProcesses = {"xfce4-panel",
                        "xfdesktop"}
    listWindowsCommand = "wmctrl -l -p"
    dmenuCommand = "dmenu -i -l 20 -m 0"
    selectedWindowCommands = {"wmctrl -i -r {} -b remove,shaded",
                              "wmctrl -i -a {}"}

    def run(self):
        windows = self.listWindows()
        dmenuInput = "\n".join(sorted(windows.keys()))
        echoCommand = 'echo "{}"|'.format(dmenuInput)
        selected = commands.getstatusoutput(echoCommand + self.dmenuCommand)[1]
        if selected in windows:
            self.processSelectedWindow(windows[selected])

    def listWindows(self):
        windows = {}
        for line in commands.getstatusoutput(self.listWindowsCommand)[1].splitlines():
            tokens = line.split()
            windowId = tokens[0]
            workspace = int(tokens[1])
            pid = int(tokens[2])
            windowTitle = " ".join(tokens[4:])
            if pid < 1:
                continue
            processName = self.fetchProcessName(pid)
            if processName is None:
                continue
            workspaceString = " "
            if workspace >= 0:
                workspaceString = "{}".format(workspace)
            menuItem = "{} {}: {}".format(workspaceString, processName, windowTitle)
            windows[menuItem] = windowId
        return windows

    def processSelectedWindow(self, windowId):
        for command in self.selectedWindowCommands:
            commands.getstatusoutput(command.format(windowId))

    def fetchProcessName(self, pid):
        process = psutil.Process(pid)
        processName = process.name()
        return processName if processName not in self.ignoredProcesses else None


if __name__ == "__main__":
    y = WindowFinder()
    y.run()
